{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9","program":"/Users/riccardo/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","regex","/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=87c3226f34331159","-C","extra-filename=-87c3226f34331159","--out-dir","/Users/riccardo/github/PhotoStack/photo-stack-back/rust_server/target/rls/debug/deps","-L","dependency=/Users/riccardo/github/PhotoStack/photo-stack-back/rust_server/target/rls/debug/deps","--extern","aho_corasick=/Users/riccardo/github/PhotoStack/photo-stack-back/rust_server/target/rls/debug/deps/libaho_corasick-3b407e7fac176edc.rlib","--extern","memchr=/Users/riccardo/github/PhotoStack/photo-stack-back/rust_server/target/rls/debug/deps/libmemchr-38909d6afacbe96c.rlib","--extern","regex_syntax=/Users/riccardo/github/PhotoStack/photo-stack-back/rust_server/target/rls/debug/deps/libregex_syntax-bcee210bd559bda7.rlib","--extern","thread_local=/Users/riccardo/github/PhotoStack/photo-stack-back/rust_server/target/rls/debug/deps/libthread_local-357225454c7bb65a.rlib","--extern","utf8_ranges=/Users/riccardo/github/PhotoStack/photo-stack-back/rust_server/target/rls/debug/deps/libutf8_ranges-50624023b6f03da4.rlib","--cap-lints","allow","--cfg","regex_runtime_teddy_ssse3","--cfg","regex_runtime_teddy_avx2","--error-format=json","--sysroot","/Users/riccardo/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/riccardo/github/PhotoStack/photo-stack-back/rust_server/target/rls/debug/deps/libregex-87c3226f34331159.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[13859390563648907168,3388837925340706735]},"crate_root":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src","external_crates":[{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11705364677140973079,7726573435499814070]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9133280923345920065,5169035037401655959]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9811081489243518189,10016862334390338995]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16815776717140451016,2925157999366951619]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5571127662207602070,12081818010283277997]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9872675523737343627,13016261367480270594]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5564630398057371063,5134587089964058144]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":8,"id":{"name":"hashbrown","disambiguator":[7317189895424764231,14908133925595887831]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":9,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7982293983073241509,18348097174152154939]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3938710137457602349,12366108798000803370]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[124527115135685225,16528639863833681107]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[14633564717342525671,15444589222019281189]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":13,"id":{"name":"aho_corasick","disambiguator":[4395049671855879166,17016016025341541934]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":14,"id":{"name":"memchr","disambiguator":[13058494531485015257,1897117457971112328]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":15,"id":{"name":"thread_local","disambiguator":[6117314114386287830,16238315586736084925]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":16,"id":{"name":"lazy_static","disambiguator":[2708767465589581032,9184965371000030901]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":17,"id":{"name":"regex_syntax","disambiguator":[2801928352446584118,6051717226345298266]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":18,"id":{"name":"ucd_util","disambiguator":[3231477455944446064,4336682106095565037]}},{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","num":19,"id":{"name":"utf8_ranges","disambiguator":[8520946919035754737,9938025757135733891]}}],"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":472,"byte_end":23567,"line_start":11,"line_end":689,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1737},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":18767,"byte_end":18772,"line_start":543,"line_end":543,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":18831,"byte_end":18832,"line_start":545,"line_end":545,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":18895,"byte_end":18896,"line_start":547,"line_end":547,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":18951,"byte_end":18952,"line_start":549,"line_end":549,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2527},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19036,"byte_end":19041,"line_start":553,"line_end":553,"column_start":5,"column_end":10},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2507},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19043,"byte_end":19048,"line_start":553,"line_end":553,"column_start":12,"column_end":17},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1299},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19050,"byte_end":19058,"line_start":553,"line_end":553,"column_start":19,"column_end":27},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1263},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19064,"byte_end":19076,"line_start":554,"line_end":554,"column_start":5,"column_end":17},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1365},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19078,"byte_end":19085,"line_start":554,"line_end":554,"column_start":19,"column_end":26},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1354},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19087,"byte_end":19101,"line_start":554,"line_end":554,"column_start":28,"column_end":42},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1342},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19103,"byte_end":19120,"line_start":554,"line_end":554,"column_start":44,"column_end":61},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2532},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19126,"byte_end":19142,"line_start":555,"line_end":555,"column_start":5,"column_end":21},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1294},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19144,"byte_end":19153,"line_start":555,"line_end":555,"column_start":23,"column_end":32},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19159,"byte_end":19167,"line_start":556,"line_end":556,"column_start":5,"column_end":13},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2539},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19169,"byte_end":19180,"line_start":556,"line_end":556,"column_start":15,"column_end":26},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1395},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19182,"byte_end":19190,"line_start":556,"line_end":556,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1274},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19192,"byte_end":19197,"line_start":556,"line_end":556,"column_start":38,"column_end":43},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1284},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19199,"byte_end":19205,"line_start":556,"line_end":556,"column_start":45,"column_end":51},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1195},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":19211,"byte_end":19217,"line_start":557,"line_end":557,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":22683,"byte_end":22684,"line_start":649,"line_end":649,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":37}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":22721,"byte_end":22722,"line_start":650,"line_end":650,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":37}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":22746,"byte_end":22747,"line_start":651,"line_end":651,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":37}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":22776,"byte_end":22777,"line_start":652,"line_end":652,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":110},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23367,"byte_end":23375,"line_start":684,"line_end":684,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":377},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23396,"byte_end":23400,"line_start":685,"line_end":685,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":384},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23402,"byte_end":23413,"line_start":685,"line_end":685,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":1899},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23436,"byte_end":23440,"line_start":686,"line_end":686,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23442,"byte_end":23447,"line_start":686,"line_end":686,"column_start":27,"column_end":32},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":1875},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23449,"byte_end":23458,"line_start":686,"line_end":686,"column_start":34,"column_end":43},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":1865},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23460,"byte_end":23467,"line_start":686,"line_end":686,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":1991},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23491,"byte_end":23506,"line_start":687,"line_end":687,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":2092},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23527,"byte_end":23534,"line_start":688,"line_end":688,"column_start":20,"column_end":27},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":2110},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23536,"byte_end":23540,"line_start":688,"line_end":688,"column_start":29,"column_end":33},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":2157},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23542,"byte_end":23551,"line_start":688,"line_end":688,"column_start":35,"column_end":44},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1483}},{"kind":"Use","ref_id":{"krate":0,"index":2190},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23553,"byte_end":23563,"line_start":688,"line_end":688,"column_start":46,"column_end":56},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1483}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":472,"byte_end":23567,"line_start":11,"line_end":689,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":37},{"krate":0,"index":42},{"krate":0,"index":71},{"krate":0,"index":84},{"krate":0,"index":204},{"krate":0,"index":337},{"krate":0,"index":346},{"krate":0,"index":496},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":622},{"krate":0,"index":813},{"krate":0,"index":841},{"krate":0,"index":885},{"krate":0,"index":890},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1176},{"krate":0,"index":1403},{"krate":0,"index":1422},{"krate":0,"index":1483}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":18173,"byte_end":18195,"line_start":520,"line_end":520,"column_start":1,"column_end":23}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":18196,"byte_end":18240,"line_start":521,"line_end":521,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":22644,"byte_end":22649,"line_start":648,"line_end":648,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":22608,"byte_end":22635,"line_start":647,"line_end":647,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":44461,"byte_end":44469,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":44880,"byte_end":44883,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":45478,"byte_end":45488,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":46233,"byte_end":46238,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":46521,"byte_end":46530,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":47013,"byte_end":47016,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":47251,"byte_end":47258,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":47612,"byte_end":47619,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1738},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":159633,"byte_end":159639,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1737},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1741},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":159759,"byte_end":159773,"line_start":21,"line_end":21,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1737},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1744},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":160060,"byte_end":160075,"line_start":28,"line_end":28,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1737},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1737},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":159597,"byte_end":159602,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1738},{"krate":0,"index":1741},{"krate":0,"index":1744}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":377},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":163058,"byte_end":163062,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1751},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":163433,"byte_end":163443,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1754}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":163682,"byte_end":163695,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":384},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":165932,"byte_end":165943,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":166544,"byte_end":166547,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":166873,"byte_end":166881,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":167181,"byte_end":167192,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":167690,"byte_end":167699,"line_start":162,"line_end":162,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":168014,"byte_end":168017,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":168508,"byte_end":168528,"line_start":185,"line_end":185,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":169096,"byte_end":169101,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":169372,"byte_end":169381,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":169504,"byte_end":169511,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":172620,"byte_end":172625,"line_start":290,"line_end":290,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":198974,"byte_end":198989,"line_start":1060,"line_end":1060,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":200838,"byte_end":200854,"line_start":1118,"line_end":1118,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":200983,"byte_end":200999,"line_start":1124,"line_end":1124,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":201198,"byte_end":201206,"line_start":1132,"line_end":1132,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":201140,"byte_end":201157,"line_start":1131,"line_end":1131,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":201621,"byte_end":201633,"line_start":1144,"line_end":1144,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":201563,"byte_end":201580,"line_start":1143,"line_end":1143,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":201759,"byte_end":201769,"line_start":1149,"line_end":1149,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":201900,"byte_end":201914,"line_start":1154,"line_end":1154,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":202089,"byte_end":202104,"line_start":1159,"line_end":1159,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":202262,"byte_end":202281,"line_start":1164,"line_end":1164,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":202468,"byte_end":202481,"line_start":1170,"line_end":1170,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":202638,"byte_end":202651,"line_start":1177,"line_end":1177,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":202826,"byte_end":202842,"line_start":1183,"line_end":1183,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1865},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":224559,"byte_end":224566,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":224548,"byte_end":224637,"line_start":25,"line_end":30,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":224738,"byte_end":224746,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":224873,"byte_end":224879,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":225125,"byte_end":225129,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":225223,"byte_end":225227,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":225354,"byte_end":225357,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":225502,"byte_end":225510,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":225618,"byte_end":225621,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":225742,"byte_end":225750,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":542},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":225876,"byte_end":225881,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":225954,"byte_end":225956,"line_start":81,"line_end":81,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":226133,"byte_end":226142,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":226323,"byte_end":226336,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":226476,"byte_end":226490,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":226597,"byte_end":226606,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":226756,"byte_end":226759,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":226821,"byte_end":226829,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":226928,"byte_end":226936,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1875},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":227680,"byte_end":227689,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":227669,"byte_end":227704,"line_start":140,"line_end":140,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":227808,"byte_end":227811,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1899},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":233753,"byte_end":233757,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":233742,"byte_end":233763,"line_start":346,"line_end":346,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":233742,"byte_end":233763,"line_start":346,"line_end":346,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":234081,"byte_end":234088,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":234060,"byte_end":234069,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":234280,"byte_end":234288,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":234259,"byte_end":234268,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":234511,"byte_end":234523,"line_start":373,"line_end":373,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":234743,"byte_end":234755,"line_start":380,"line_end":380,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1991},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":236780,"byte_end":236795,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":237755,"byte_end":237760,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":237911,"byte_end":237919,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":238112,"byte_end":238120,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":238981,"byte_end":238989,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":239185,"byte_end":239189,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":239127,"byte_end":239144,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":239916,"byte_end":239926,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":240314,"byte_end":240322,"line_start":127,"line_end":127,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":240747,"byte_end":240751,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"fn (&self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":241473,"byte_end":241476,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":241611,"byte_end":241614,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":241723,"byte_end":241731,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":241847,"byte_end":241850,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":242302,"byte_end":242318,"line_start":186,"line_end":186,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":755},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245780,"byte_end":245785,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":757},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245791,"byte_end":245796,"line_start":274,"line_end":274,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":760},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245812,"byte_end":245818,"line_start":275,"line_end":275,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":763},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245834,"byte_end":245836,"line_start":276,"line_end":276,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":766},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245857,"byte_end":245867,"line_start":277,"line_end":277,"column_start":5,"column_end":15},"name":"TeddySSSE3","qualname":"::literal::LiteralIter::TeddySSSE3","value":"LiteralIter::TeddySSSE3(&'a [Vec<u8>])","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":769},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245888,"byte_end":245897,"line_start":278,"line_end":278,"column_start":5,"column_end":14},"name":"TeddyAVX2","qualname":"::literal::LiteralIter::TeddyAVX2","value":"LiteralIter::TeddyAVX2(&'a [Vec<u8>])","parent":{"krate":0,"index":753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":753},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245758,"byte_end":245769,"line_start":272,"line_end":272,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::LiteralIter","value":"LiteralIter::{Empty, Bytes, Single, AC, TeddySSSE3, TeddyAVX2}","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":769}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2034},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":250497,"byte_end":250508,"line_start":427,"line_end":427,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":252951,"byte_end":252955,"line_start":503,"line_end":503,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"fn (&self, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":252893,"byte_end":252910,"line_start":502,"line_end":502,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":253783,"byte_end":253792,"line_start":529,"line_end":529,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":253725,"byte_end":253742,"line_start":528,"line_end":528,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":253967,"byte_end":253970,"line_start":536,"line_end":536,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":254030,"byte_end":254038,"line_start":540,"line_end":540,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2092},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":339188,"byte_end":339195,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":2093},{"krate":0,"index":2094},{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103},{"krate":0,"index":2104},{"krate":0,"index":2105},{"krate":0,"index":2106},{"krate":0,"index":2107}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2093},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":339265,"byte_end":339270,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2094},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":339435,"byte_end":339442,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2095},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":339576,"byte_end":339584,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2096},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":339677,"byte_end":339693,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2097},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340050,"byte_end":340055,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340169,"byte_end":340181,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2099},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340260,"byte_end":340269,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2100},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340393,"byte_end":340401,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2101},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340590,"byte_end":340596,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2102},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340702,"byte_end":340712,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2103},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340794,"byte_end":340811,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2104},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340889,"byte_end":340904,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2105},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":340995,"byte_end":341020,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2106},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":341112,"byte_end":341120,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::LiteralSearcher","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2107},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":341947,"byte_end":341961,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":342087,"byte_end":342090,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":342805,"byte_end":342809,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":343123,"byte_end":343137,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":343663,"byte_end":343676,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":343883,"byte_end":343893,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":344128,"byte_end":344137,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":344285,"byte_end":344301,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2111},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":349003,"byte_end":349008,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2114},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":349138,"byte_end":349142,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2117},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":349277,"byte_end":349282,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2120},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":349442,"byte_end":349451,"line_start":276,"line_end":276,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2123},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":349593,"byte_end":349597,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":349771,"byte_end":349777,"line_start":282,"line_end":282,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2129},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":349975,"byte_end":349980,"line_start":286,"line_end":286,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2110},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":348574,"byte_end":348578,"line_start":259,"line_end":259,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":2111},{"krate":0,"index":2114},{"krate":0,"index":2117},{"krate":0,"index":2120},{"krate":0,"index":2123},{"krate":0,"index":2126},{"krate":0,"index":2129}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350084,"byte_end":350092,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2136},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350290,"byte_end":350298,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":2137},{"krate":0,"index":2138}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2137},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350362,"byte_end":350366,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2138},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350521,"byte_end":350525,"line_start":306,"line_end":306,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2143},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350617,"byte_end":350626,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":2144},{"krate":0,"index":2145}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2144},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350782,"byte_end":350787,"line_start":314,"line_end":314,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":2143},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2145},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350952,"byte_end":350957,"line_start":317,"line_end":317,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":2143},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2150},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351057,"byte_end":351070,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":2151},{"krate":0,"index":2152}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2151},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351171,"byte_end":351175,"line_start":325,"line_end":325,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":2150},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2152},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351245,"byte_end":351249,"line_start":327,"line_end":327,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":2150},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2158},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351413,"byte_end":351422,"line_start":334,"line_end":334,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2160},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351458,"byte_end":351465,"line_start":336,"line_end":336,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2162},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351495,"byte_end":351504,"line_start":338,"line_end":338,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2164},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351532,"byte_end":351539,"line_start":340,"line_end":340,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2166},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351613,"byte_end":351625,"line_start":342,"line_end":342,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2168},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351705,"byte_end":351720,"line_start":344,"line_end":344,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2170},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351755,"byte_end":351772,"line_start":346,"line_end":346,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2172},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351811,"byte_end":351831,"line_start":348,"line_end":348,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2157},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351365,"byte_end":351374,"line_start":332,"line_end":332,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":2158},{"krate":0,"index":2160},{"krate":0,"index":2162},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2170},{"krate":0,"index":2172}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351356,"byte_end":351834,"line_start":332,"line_end":349,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351356,"byte_end":351834,"line_start":332,"line_end":349,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2183},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":351915,"byte_end":351923,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":2184},{"krate":0,"index":2185}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2184},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":352024,"byte_end":352028,"line_start":356,"line_end":356,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2183},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2185},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":352078,"byte_end":352079,"line_start":358,"line_end":358,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2183},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":352171,"byte_end":352181,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":2191},{"krate":0,"index":2192}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2191},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":352282,"byte_end":352286,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":352361,"byte_end":352367,"line_start":368,"line_end":368,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":352494,"byte_end":352501,"line_start":373,"line_end":373,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":353287,"byte_end":353296,"line_start":398,"line_end":398,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2197},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":353551,"byte_end":353560,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2198},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":353661,"byte_end":353665,"line_start":411,"line_end":411,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2199},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":353734,"byte_end":353739,"line_start":413,"line_end":413,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2200},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":353801,"byte_end":353804,"line_start":415,"line_end":415,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2197},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":353910,"byte_end":353917,"line_start":420,"line_end":420,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2205},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354608,"byte_end":354620,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354574,"byte_end":354596,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2206},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354631,"byte_end":354635,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2207},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354658,"byte_end":354668,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2208},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354685,"byte_end":354699,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2209},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354716,"byte_end":354726,"line_start":18,"line_end":18,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2210},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354741,"byte_end":354757,"line_start":19,"line_end":19,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2211},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354773,"byte_end":354783,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2212},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354799,"byte_end":354819,"line_start":21,"line_end":21,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2213},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354835,"byte_end":354845,"line_start":22,"line_end":22,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354861,"byte_end":354878,"line_start":23,"line_end":23,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2215},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354894,"byte_end":354901,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2216},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354917,"byte_end":354922,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2205},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2309},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370047,"byte_end":370052,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2313}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370036,"byte_end":370114,"line_start":30,"line_end":34,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370036,"byte_end":370114,"line_start":30,"line_end":34,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370233,"byte_end":370238,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370212,"byte_end":370221,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370377,"byte_end":370380,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370356,"byte_end":370365,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370482,"byte_end":370490,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370461,"byte_end":370470,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2329},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":371504,"byte_end":371509,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":372568,"byte_end":372571,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":373302,"byte_end":373310,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":374172,"byte_end":374176,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":374892,"byte_end":374901,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":378038,"byte_end":378046,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":379491,"byte_end":379504,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":380422,"byte_end":380427,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":381443,"byte_end":381449,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":386232,"byte_end":386239,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":386696,"byte_end":386707,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":387176,"byte_end":387184,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":389659,"byte_end":389673,"line_start":561,"line_end":561,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":390061,"byte_end":390078,"line_start":571,"line_end":571,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":390522,"byte_end":390533,"line_start":585,"line_end":585,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":390930,"byte_end":390937,"line_start":595,"line_end":595,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":391585,"byte_end":391598,"line_start":614,"line_end":614,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":392105,"byte_end":392121,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":392666,"byte_end":392682,"line_start":646,"line_end":646,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":392971,"byte_end":392977,"line_start":659,"line_end":659,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":393100,"byte_end":393113,"line_start":664,"line_end":664,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":393249,"byte_end":393261,"line_start":669,"line_end":669,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":393472,"byte_end":393489,"line_start":675,"line_end":675,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":393836,"byte_end":393845,"line_start":684,"line_end":684,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":972},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":394335,"byte_end":394342,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":983},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":394915,"byte_end":394929,"line_start":715,"line_end":715,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":994},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":395510,"byte_end":395515,"line_start":733,"line_end":733,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1004},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":396498,"byte_end":396504,"line_start":768,"line_end":768,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1008}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1014},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":397199,"byte_end":397211,"line_start":796,"line_end":796,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2334},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":398346,"byte_end":398362,"line_start":827,"line_end":827,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1025},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":398684,"byte_end":398693,"line_start":835,"line_end":835,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":399051,"byte_end":399054,"line_start":843,"line_end":843,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":399030,"byte_end":399039,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":399349,"byte_end":399352,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":399328,"byte_end":399337,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":399712,"byte_end":399715,"line_start":863,"line_end":863,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":399691,"byte_end":399700,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":400349,"byte_end":400357,"line_start":879,"line_end":879,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":401292,"byte_end":401295,"line_start":905,"line_end":905,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":401580,"byte_end":401584,"line_start":911,"line_end":911,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":402016,"byte_end":402020,"line_start":920,"line_end":920,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":403064,"byte_end":403070,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":403381,"byte_end":403384,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":403360,"byte_end":403369,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":406514,"byte_end":406531,"line_start":1049,"line_end":1049,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1088},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":407224,"byte_end":407232,"line_start":1070,"line_end":1070,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1092}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":407518,"byte_end":407532,"line_start":1078,"line_end":1078,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":1088},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":407943,"byte_end":407955,"line_start":1087,"line_end":1087,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":1088},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":408686,"byte_end":408692,"line_start":1112,"line_end":1112,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1088},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2341},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":408920,"byte_end":408931,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1108},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":410216,"byte_end":410224,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2500},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":427022,"byte_end":427031,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":427360,"byte_end":427363,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":427807,"byte_end":427811,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":428106,"byte_end":428109,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1125},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":428522,"byte_end":428540,"line_start":64,"line_end":64,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1128}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1133},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":429743,"byte_end":429760,"line_start":99,"line_end":99,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1134},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":429813,"byte_end":429817,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":429992,"byte_end":430001,"line_start":105,"line_end":105,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":430097,"byte_end":430106,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"fn (&self) -> Locations","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":430452,"byte_end":430468,"line_start":117,"line_end":117,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"fn (&self, text: &Self::Text, i: usize) -> usize","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":430575,"byte_end":430592,"line_start":120,"line_end":120,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<usize>","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":430748,"byte_end":430759,"line_start":127,"line_end":127,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> bool","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":430913,"byte_end":430920,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1141},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":431155,"byte_end":431171,"line_start":142,"line_end":142,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"fn (&self, locs: &mut Locations, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":431404,"byte_end":431413,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"fn (self, text: &Self::Text) -> Matches<Self>","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":431735,"byte_end":431748,"line_start":165,"line_end":165,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"fn (self, text: &Self::Text) -> CaptureMatches<Self>","parent":{"krate":0,"index":1133},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1144},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":431964,"byte_end":431971,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":432230,"byte_end":432234,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":432332,"byte_end":432337,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":433537,"byte_end":433551,"line_start":225,"line_end":225,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":433748,"byte_end":433752,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":433854,"byte_end":433859,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1195},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":435740,"byte_end":435746,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2507},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":435997,"byte_end":436002,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":435986,"byte_end":436063,"line_start":39,"line_end":43,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":435986,"byte_end":436063,"line_start":39,"line_end":43,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":436182,"byte_end":436187,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":436161,"byte_end":436170,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":436326,"byte_end":436329,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":436305,"byte_end":436314,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":436431,"byte_end":436437,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":436410,"byte_end":436419,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439142,"byte_end":439147,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":440089,"byte_end":440092,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":440822,"byte_end":440830,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":441706,"byte_end":441710,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":442424,"byte_end":442433,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":445513,"byte_end":445521,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":446854,"byte_end":446867,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":447726,"byte_end":447731,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":448719,"byte_end":448725,"line_start":397,"line_end":397,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":453262,"byte_end":453269,"line_start":509,"line_end":509,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":453726,"byte_end":453737,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":454206,"byte_end":454214,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":457170,"byte_end":457184,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":457571,"byte_end":457588,"line_start":627,"line_end":627,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":458035,"byte_end":458046,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":458442,"byte_end":458449,"line_start":651,"line_end":651,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":459111,"byte_end":459124,"line_start":671,"line_end":671,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":459623,"byte_end":459639,"line_start":685,"line_end":685,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":460187,"byte_end":460203,"line_start":703,"line_end":703,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":460491,"byte_end":460497,"line_start":716,"line_end":716,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":460620,"byte_end":460633,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":460769,"byte_end":460781,"line_start":726,"line_end":726,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":460992,"byte_end":461009,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":461360,"byte_end":461369,"line_start":741,"line_end":741,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1263},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":461725,"byte_end":461737,"line_start":752,"line_end":752,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1274},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":462326,"byte_end":462331,"line_start":773,"line_end":773,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1284},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":463307,"byte_end":463313,"line_start":808,"line_end":808,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1287},{"krate":0,"index":1288}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2532},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":464519,"byte_end":464535,"line_start":846,"line_end":846,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1294},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":464857,"byte_end":464866,"line_start":854,"line_end":854,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":465224,"byte_end":465227,"line_start":862,"line_end":862,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":465203,"byte_end":465212,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":465522,"byte_end":465525,"line_start":871,"line_end":871,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":465501,"byte_end":465510,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":465885,"byte_end":465888,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":465864,"byte_end":465873,"line_start":881,"line_end":881,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1299},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":466512,"byte_end":466520,"line_start":898,"line_end":898,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":467418,"byte_end":467421,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":467706,"byte_end":467710,"line_start":930,"line_end":930,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":468142,"byte_end":468146,"line_start":939,"line_end":939,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":469190,"byte_end":469196,"line_start":962,"line_end":962,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":469503,"byte_end":469506,"line_start":971,"line_end":971,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":469482,"byte_end":469491,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":472184,"byte_end":472201,"line_start":1053,"line_end":1053,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1345},{"krate":0,"index":1346}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1354},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":472828,"byte_end":472842,"line_start":1074,"line_end":1074,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1365},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":473527,"byte_end":473534,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1376},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":474159,"byte_end":474167,"line_start":1112,"line_end":1112,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1380}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":474474,"byte_end":474488,"line_start":1120,"line_end":1120,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":474893,"byte_end":474905,"line_start":1129,"line_end":1129,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":475626,"byte_end":475632,"line_start":1154,"line_end":1154,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2539},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":475860,"byte_end":475871,"line_start":1163,"line_end":1163,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1395},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":477129,"byte_end":477137,"line_start":1201,"line_end":1201,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2548},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478018,"byte_end":478027,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":2549},{"krate":0,"index":2550}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478406,"byte_end":478409,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478585,"byte_end":478588,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478650,"byte_end":478658,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478724,"byte_end":478732,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478799,"byte_end":478805,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478981,"byte_end":478989,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":479117,"byte_end":479122,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1483},"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23335,"byte_end":23343,"line_start":683,"line_end":683,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":1493},{"krate":0,"index":1494}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/lib.rs","byte_start":23299,"byte_end":23326,"line_start":682,"line_end":682,"column_start":1,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/backtrack.rs","byte_start":26302,"byte_end":26307,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/backtrack.rs","byte_start":26969,"byte_end":26976,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":44722,"byte_end":44730,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":71206,"byte_end":71215,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":73392,"byte_end":73400,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":74333,"byte_end":74345,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":79099,"byte_end":79110,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":80352,"byte_end":80364,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":93353,"byte_end":93359,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":95655,"byte_end":95663,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":96085,"byte_end":96090,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":100321,"byte_end":100326,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":101145,"byte_end":101155,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":101459,"byte_end":101462,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":150050,"byte_end":150058,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":150852,"byte_end":150863,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":152724,"byte_end":152734,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":153170,"byte_end":153174,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":153750,"byte_end":153755,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":154026,"byte_end":154037,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":154459,"byte_end":154473,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":154979,"byte_end":154989,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":160109,"byte_end":160114,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":160381,"byte_end":160386,"line_start":41,"line_end":41,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":161035,"byte_end":161040,"line_start":58,"line_end":58,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":166250,"byte_end":166261,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":175609,"byte_end":175622,"line_start":366,"line_end":366,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":176660,"byte_end":176670,"line_start":401,"line_end":401,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":186097,"byte_end":186107,"line_start":640,"line_end":640,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":200952,"byte_end":200965,"line_start":1123,"line_end":1123,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":201089,"byte_end":201093,"line_start":1129,"line_end":1129,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":202946,"byte_end":202950,"line_start":1188,"line_end":1188,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":203100,"byte_end":203112,"line_start":1197,"line_end":1197,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":208668,"byte_end":208685,"line_start":1344,"line_end":1344,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/expand.rs","byte_start":215634,"byte_end":215637,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/expand.rs","byte_start":215733,"byte_end":215736,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":224644,"byte_end":224651,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":227715,"byte_end":227724,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":227898,"byte_end":227907,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":228013,"byte_end":228022,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":230141,"byte_end":230150,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":230412,"byte_end":230421,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":230530,"byte_end":230539,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":233785,"byte_end":233789,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":233999,"byte_end":234003,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":234958,"byte_end":234962,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":235044,"byte_end":235048,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":235171,"byte_end":235175,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":235404,"byte_end":235408,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_avx2/imp.rs","byte_start":277945,"byte_end":277950,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_avx2/imp.rs","byte_start":289663,"byte_end":289668,"line_start":369,"line_end":369,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_avx2/imp.rs","byte_start":292455,"byte_end":292459,"line_start":450,"line_end":450,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_ssse3/imp.rs","byte_start":310123,"byte_end":310128,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_ssse3/imp.rs","byte_start":321845,"byte_end":321850,"line_start":679,"line_end":679,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_ssse3/imp.rs","byte_start":324638,"byte_end":324642,"line_start":760,"line_end":760,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":237651,"byte_end":237666,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":242798,"byte_end":242805,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245939,"byte_end":245950,"line_start":281,"line_end":281,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":247665,"byte_end":247678,"line_start":344,"line_end":344,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":251585,"byte_end":251596,"line_start":453,"line_end":453,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":256903,"byte_end":256919,"line_start":616,"line_end":616,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/pikevm.rs","byte_start":328653,"byte_end":328658,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/pikevm.rs","byte_start":328952,"byte_end":328955,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/pikevm.rs","byte_start":338155,"byte_end":338162,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":341978,"byte_end":341985,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":344939,"byte_end":344946,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":345087,"byte_end":345094,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350001,"byte_end":350005,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":352396,"byte_end":352406,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":353818,"byte_end":353827,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354950,"byte_end":354962,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370125,"byte_end":370130,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":371540,"byte_end":371545,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":371722,"byte_end":371727,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":372032,"byte_end":372037,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":372121,"byte_end":372126,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":372337,"byte_end":372342,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":934},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":388858,"byte_end":388863,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":961},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":392901,"byte_end":392906,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":394418,"byte_end":394425,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":395012,"byte_end":395026,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":395601,"byte_end":395606,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":396585,"byte_end":396591,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":397280,"byte_end":397292,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":398720,"byte_end":398736,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":400474,"byte_end":400482,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":403460,"byte_end":403468,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":403695,"byte_end":403708,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":405199,"byte_end":405207,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1064},{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":405843,"byte_end":405851,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":406635,"byte_end":406652,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":409014,"byte_end":409025,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":409611,"byte_end":409612,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1107}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":410267,"byte_end":410275,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":427050,"byte_end":427059,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":428613,"byte_end":428631,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":432122,"byte_end":432129,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":432404,"byte_end":432411,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1159},{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":433633,"byte_end":433647,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":433932,"byte_end":433946,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":436074,"byte_end":436079,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439178,"byte_end":439183,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439360,"byte_end":439365,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439553,"byte_end":439558,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439642,"byte_end":439647,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439858,"byte_end":439863,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1219},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1237},{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":456377,"byte_end":456382,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":460421,"byte_end":460426,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":461806,"byte_end":461818,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":462417,"byte_end":462422,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":463394,"byte_end":463400,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1292},{"krate":0,"index":1293}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":464893,"byte_end":464909,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":466636,"byte_end":466644,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1308},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":469582,"byte_end":469590,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":469817,"byte_end":469830,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":470877,"byte_end":470885,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":471517,"byte_end":471525,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":472305,"byte_end":472322,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":472928,"byte_end":472942,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1363}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":473613,"byte_end":473620,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":475954,"byte_end":475965,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1385},{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":476545,"byte_end":476546,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":477179,"byte_end":477187,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1401},{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478383,"byte_end":478392,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":479188,"byte_end":479197,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/avx2.rs","byte_start":479713,"byte_end":479730,"line_start":10,"line_end":10,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/avx2.rs","byte_start":481429,"byte_end":481434,"line_start":65,"line_end":65,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/avx2.rs","byte_start":485262,"byte_end":485267,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/ssse3.rs","byte_start":485856,"byte_end":485874,"line_start":18,"line_end":18,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/ssse3.rs","byte_start":488194,"byte_end":488199,"line_start":86,"line_end":86,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1479}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/ssse3.rs","byte_start":491018,"byte_end":491023,"line_start":188,"line_end":188,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/backtrack.rs","byte_start":26302,"byte_end":26307,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/backtrack.rs","byte_start":26969,"byte_end":26976,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":44722,"byte_end":44730,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":71206,"byte_end":71215,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":73392,"byte_end":73400,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":74333,"byte_end":74345,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":79099,"byte_end":79110,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/compile.rs","byte_start":80352,"byte_end":80364,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":93353,"byte_end":93359,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":95655,"byte_end":95663,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":96085,"byte_end":96090,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1673},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":100321,"byte_end":100326,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":101145,"byte_end":101155,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":101459,"byte_end":101462,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1645},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":150050,"byte_end":150058,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":150852,"byte_end":150863,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":152724,"byte_end":152734,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1715},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":153170,"byte_end":153174,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":153750,"byte_end":153755,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1673},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":154026,"byte_end":154037,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1640},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":154459,"byte_end":154473,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":320},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/dfa.rs","byte_start":154979,"byte_end":154989,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1715},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":160109,"byte_end":160114,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1737},"to":{"krate":1,"index":1537}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":160381,"byte_end":160386,"line_start":41,"line_end":41,"column_start":23,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1737},"to":{"krate":2,"index":6704}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/error.rs","byte_start":161035,"byte_end":161040,"line_start":58,"line_end":58,"column_start":21,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1737},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":166250,"byte_end":166261,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":175609,"byte_end":175622,"line_start":366,"line_end":366,"column_start":32,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":380},"to":{"krate":0,"index":1133}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":176660,"byte_end":176670,"line_start":401,"line_end":401,"column_start":32,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1751},"to":{"krate":0,"index":1133}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":186097,"byte_end":186107,"line_start":640,"line_end":640,"column_start":10,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":200952,"byte_end":200965,"line_start":1123,"line_end":1123,"column_start":10,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":201089,"byte_end":201093,"line_start":1129,"line_end":1129,"column_start":6,"column_end":10},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":202946,"byte_end":202950,"line_start":1188,"line_end":1188,"column_start":16,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":2002}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":203100,"byte_end":203112,"line_start":1197,"line_end":1197,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/exec.rs","byte_start":208668,"byte_end":208685,"line_start":1344,"line_end":1344,"column_start":6,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/expand.rs","byte_start":215634,"byte_end":215637,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1842},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/expand.rs","byte_start":215733,"byte_end":215736,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1842},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":224644,"byte_end":224651,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":227715,"byte_end":227724,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1875},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":227898,"byte_end":227907,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1875},"to":{"krate":2,"index":1550}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":228013,"byte_end":228022,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1875},"to":{"krate":0,"index":542}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":230141,"byte_end":230150,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":230412,"byte_end":230421,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1887},"to":{"krate":2,"index":1550}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":230530,"byte_end":230539,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1887},"to":{"krate":0,"index":542}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":233785,"byte_end":233789,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1899},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":233999,"byte_end":234003,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":234958,"byte_end":234962,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1899},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":235044,"byte_end":235048,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1899},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":235171,"byte_end":235175,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1899},"to":{"krate":2,"index":1882}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/input.rs","byte_start":235404,"byte_end":235408,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1899},"to":{"krate":2,"index":1916}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_avx2/imp.rs","byte_start":277945,"byte_end":277950,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_avx2/imp.rs","byte_start":289663,"byte_end":289668,"line_start":369,"line_end":369,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1939},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_avx2/imp.rs","byte_start":292455,"byte_end":292459,"line_start":450,"line_end":450,"column_start":6,"column_end":10},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_ssse3/imp.rs","byte_start":310123,"byte_end":310128,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_ssse3/imp.rs","byte_start":321845,"byte_end":321850,"line_start":679,"line_end":679,"column_start":6,"column_end":11},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1974},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/teddy_ssse3/imp.rs","byte_start":324638,"byte_end":324642,"line_start":760,"line_end":760,"column_start":6,"column_end":10},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":237651,"byte_end":237666,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1991},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":242798,"byte_end":242805,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":245939,"byte_end":245950,"line_start":281,"line_end":281,"column_start":23,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":753},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":247665,"byte_end":247678,"line_start":344,"line_end":344,"column_start":6,"column_end":19},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":251585,"byte_end":251596,"line_start":453,"line_end":453,"column_start":6,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/literal/mod.rs","byte_start":256903,"byte_end":256919,"line_start":616,"line_end":616,"column_start":6,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2045},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/pikevm.rs","byte_start":328653,"byte_end":328658,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/pikevm.rs","byte_start":328952,"byte_end":328955,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/pikevm.rs","byte_start":338155,"byte_end":338162,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2073},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":341978,"byte_end":341985,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":344939,"byte_end":344946,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2092},"to":{"krate":2,"index":1550}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":345087,"byte_end":345094,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2092},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":350001,"byte_end":350005,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":352396,"byte_end":352406,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/prog.rs","byte_start":353818,"byte_end":353827,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_builder.rs","byte_start":354950,"byte_end":354962,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2205},"to":{"krate":2,"index":2026}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":370125,"byte_end":370130,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":371540,"byte_end":371545,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":6704}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":371722,"byte_end":371727,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":372032,"byte_end":372037,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":372121,"byte_end":372126,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":5900}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":372337,"byte_end":372342,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":388858,"byte_end":388863,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":392901,"byte_end":392906,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":394418,"byte_end":394425,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":972},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":395012,"byte_end":395026,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":983},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":395601,"byte_end":395606,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":396585,"byte_end":396591,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1004},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":397280,"byte_end":397292,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1014},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":398720,"byte_end":398736,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":400474,"byte_end":400482,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1030},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":403460,"byte_end":403468,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":403695,"byte_end":403708,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1048},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":405199,"byte_end":405207,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1626}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":405843,"byte_end":405851,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1626}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":406635,"byte_end":406652,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1076},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":409014,"byte_end":409025,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2341},"to":{"krate":0,"index":1088}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":409611,"byte_end":409612,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1105},"to":{"krate":0,"index":1088}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_bytes.rs","byte_start":410267,"byte_end":410275,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1108},"to":{"krate":0,"index":1088}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":427050,"byte_end":427059,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":428613,"byte_end":428631,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1125},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":429762,"byte_end":429767,"line_start":99,"line_end":99,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":1133}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":432122,"byte_end":432129,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":432404,"byte_end":432411,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1144},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":433633,"byte_end":433647,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_trait.rs","byte_start":433932,"byte_end":433946,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1161},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":436074,"byte_end":436079,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439178,"byte_end":439183,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2527},"to":{"krate":2,"index":6704}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439360,"byte_end":439365,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2527},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439553,"byte_end":439558,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2527},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439642,"byte_end":439647,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2527},"to":{"krate":2,"index":5900}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":439858,"byte_end":439863,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":456377,"byte_end":456382,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":460421,"byte_end":460426,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":461806,"byte_end":461818,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1263},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":462417,"byte_end":462422,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1274},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":463394,"byte_end":463400,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1284},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":464893,"byte_end":464909,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":466636,"byte_end":466644,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1299},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":469582,"byte_end":469590,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1299},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":469817,"byte_end":469830,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1317},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":470877,"byte_end":470885,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1299},"to":{"krate":2,"index":1626}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":471517,"byte_end":471525,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1299},"to":{"krate":2,"index":1626}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":472305,"byte_end":472322,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1342},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":472928,"byte_end":472942,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1354},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":473613,"byte_end":473620,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1365},"to":{"krate":2,"index":3144}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":475954,"byte_end":475965,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2539},"to":{"krate":0,"index":1376}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":476545,"byte_end":476546,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1392},"to":{"krate":0,"index":1376}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/re_unicode.rs","byte_start":477179,"byte_end":477187,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1395},"to":{"krate":0,"index":1376}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":478383,"byte_end":478392,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/sparse.rs","byte_start":479188,"byte_end":479197,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2548},"to":{"krate":2,"index":1550}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/avx2.rs","byte_start":479713,"byte_end":479730,"line_start":10,"line_end":10,"column_start":6,"column_end":23},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/avx2.rs","byte_start":481429,"byte_end":481434,"line_start":65,"line_end":65,"column_start":6,"column_end":11},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/avx2.rs","byte_start":485262,"byte_end":485267,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2563},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/ssse3.rs","byte_start":485856,"byte_end":485874,"line_start":18,"line_end":18,"column_start":6,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/ssse3.rs","byte_start":488194,"byte_end":488199,"line_start":86,"line_end":86,"column_start":6,"column_end":11},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/riccardo/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.9/src/vector/ssse3.rs","byte_start":491018,"byte_end":491023,"line_start":188,"line_end":188,"column_start":21,"column_end":26},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2576},"to":{"krate":2,"index":6702}}]}